/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <android/log.h>
#include <android/bitmap.h>
#include <stdlib.h>
#include <stdio.h>
#include <tiffio.h>
/* Header for class NativeTiffBitmapFactory */

#define LOGI(x) __android_log_print(ANDROID_LOG_DEBUG, "NativeTiffBitmapFactory", "%s", x)
#define LOGII(x, y) __android_log_print(ANDROID_LOG_DEBUG, "NativeTiffBitmapFactory", "%s %d", x, y)
#define LOGIS(x, y) __android_log_print(ANDROID_LOG_DEBUG, "NativeTiffBitmapFactory", "%s %s", x, y)

#define LOGE(x) __android_log_print(ANDROID_LOG_ERROR, "NativeTiffBitmapFactory", "%s", x)
#define LOGES(x, y) __android_log_print(ANDROID_LOG_ERROR, "NativeTiffBitmapFactory", "%s %s", x, y)

#ifndef _Included_org_beyka_tiffbitmapfactory_TiffBitmapFactory
#define _Included_org_beyka_tiffbitmapfactory_TiffBitmapFactory
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_example_beyka_tiffexample_TiffBitmapFactory
 * Method:    nativeDecodePath
 * Signature: (Ljava/lang/String;I)Landroid/graphics/Bitmap;
 */
JNIEXPORT jobject JNICALL Java_org_beyka_tiffbitmapfactory_TiffBitmapFactory_nativeDecodePath
  (JNIEnv *, jclass, jstring, jobject);

/*
 * Return count of directory in image
 */
int getDyrectoryCount();

/*
 * Fill out fields in Options object
 */
void writeDataToOptions(JNIEnv *, jobject, int);

/*
 * Create java bitmap object
 */
jobject createBitmap(JNIEnv *, int, int, jobject, jstring path);

/*
 * Create java bitmap object with config ARGB_8888
 */
jint * createBitmapARGB8888(JNIEnv *, int, unsigned int *, int *, int *);
/*
 * Create java bitmap object with config ALPHA_8
 */
jbyte * createBitmapAlpha8(JNIEnv *, int, unsigned int *, int *, int *);

/*
 * Create java bitmap object with config RGB_565
 */
unsigned short *createBitmapRGB565(JNIEnv *, int, unsigned int *, int *, int *);

/*
 * Create blank java bitmap object with config ARGB_8888 and width and height calculated
 * from original width and height and inSampleSize
 */
jobject createBlankBitmap(JNIEnv *, int width, int height);

/*
 * Release references and objects
 */
void releaseImage(JNIEnv *);

#ifdef __cplusplus
}
#endif
#endif
